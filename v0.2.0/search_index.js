var documenterSearchIndex = {"docs":
[{"location":"api/#API-reference","page":"API reference","title":"API reference","text":"","category":"section"},{"location":"api/#Index","page":"API reference","title":"Index","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"Pages = [\"api.md\"]","category":"page"},{"location":"api/#Types","page":"API reference","title":"Types","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"PsPFile\nUpfFile\nPsp8File\nHghFile\nAbstractPsP\nNumericPsP{T}\nNormConservingPsP{T}\nUltrasoftPsP{T}\nProjectorAugmentedWavePsP{T}\nAnalyticalPsP\nHghPsP{T}","category":"page"},{"location":"api/#PseudoPotentialIO.PsPFile","page":"API reference","title":"PseudoPotentialIO.PsPFile","text":"abstract type PsPFile\n\nAbstract type representing a pseudopotential file.\n\nThe structure of the data should closely mirror the format of the file, and the values of quantities should be exactly those found in the file.\n\nRequired methods:\n\n# A unique string, usually a hash or checksum.\nfunction identifier(file::PsPFile)::AbstractString end\n# A short string listing the file format (e.g. `\"PSP8\"`)\nfunction format(file::PsPFile)::AbstractString end\n# The symbol of the element for which the file contains a pseudopotential (e.g. `\"Ag\"`)\nfunction elemental_symbol(file::PsPFile)::AbstractString end\n# The maximum angular momentum channel contained in the file\nfunction max_angular_momentum(file::PsPFile)::Integer end\n# The number of non-local projectors for angular momentum `l` contained in the file\nfunction n_projector_radials(file::PsPFile, l::Integer)::Integer end\n# The number of chi functions for angular momentum `l` contained in the file\nfunction n_chi_function_radials(file::PsPFile, l::Integer)::Integer end\n# The pseudo-atomic valence charge\nfunction valence_charge(file::PsPFile)::Real end\n# Whether the file contains a norm-conserving pseudopotential\nfunction is_norm_conserving(file::PsPFile)::Bool end\n# Whether the file contains an ultrasoft pseudopotential\nfunction is_ultrasoft(file::PsPFile)::Bool end\n# Whether the file contains a projector-augmented wave pseudopotential\nfunction is_paw(file::PsPFile)::Bool end\n# Whether the file contains a pseudopotential supporting spin-orbit coupled calculations\nfunction has_spin_orbit(file::PsPFile)::Bool end\n# Whether the file contains a pseudopotential supporting non-linear core corrections\nfunction has_core_density(file::PsPFile)::Bool end\n\n\n\n\n\n","category":"type"},{"location":"api/#PseudoPotentialIO.UpfFile","page":"API reference","title":"PseudoPotentialIO.UpfFile","text":"struct UpfFile <: PsPFile\n\nUniversal Pseudopotential Format file contents.\n\nchecksum::Vector{UInt8}: SHA1 Checksum\nversion::String: UPF format version\ninfo::Union{Nothing, String}: Optional general information about the pseudopotential, often generation input\nheader::PseudoPotentialIO.UpfHeader: Various pseudopotential metadata\nmesh::PseudoPotentialIO.UpfMesh: Radial mesh, mesh integration factors, and other mesh information\nnlcc::Union{Nothing, Vector{Float64}}: Pseudized core charge on the radial grid, (ignored if core_correction is false)\nlocal_::Union{Nothing, Vector{Float64}}: Local part of the pseudopotential on the radial grid (ignored if is_coulomb)\nnonlocal::PseudoPotentialIO.UpfNonlocal: Nonlocal part of the pseudopotential\npswfc::Union{Nothing, Vector{PseudoPotentialIO.UpfChi}}: Pseudo-atomic valence wavefunctions\nfull_wfc::Union{Nothing, PseudoPotentialIO.UpfFullWfc}: All-electron wavefunctions\nrhoatom::Vector{Float64}: Pseudo-atomic valence charge density on the radial grid\nspin_orb::Union{Nothing, PseudoPotentialIO.UpfSpinOrb}: Spin-orbit coupling data, (ignored if has_so is false)\npaw::Union{Nothing, PseudoPotentialIO.UpfPaw}: PAW data, (ignored if is_paw is false)\ngipaw::Union{Nothing, PseudoPotentialIO.UpfGipaw}: GIPAW data\n\n\n\n\n\n","category":"type"},{"location":"api/#PseudoPotentialIO.Psp8File","page":"API reference","title":"PseudoPotentialIO.Psp8File","text":"struct Psp8File <: PsPFile\n\nABINIT PSeudoPotential format 8 file contents. Information on the file format specification and the meaning of the quantities within the file can be found on the \"psp8\" page of the ABINIT documentation.\n\nchecksum::Vector{UInt8}: SHA1 Checksum\nheader::PseudoPotentialIO.Psp8Header: Various pseudopotential metadata\nrgrid::Vector{Float64}: Uniform radial grid starting at r = 0.0\nv_local::Vector{Float64}: Local part of the pseudopotential\nprojectors::Vector{Vector{Vector{Float64}}}: Radial part of the Kleinman-Bylander projectors for each angular momentum\nekb::Vector{Vector{Float64}}: Kleinman-Bylander energies for each angular momentum\nprojectors_so::Union{Nothing, Vector{Vector{Vector{Float64}}}}: Radial part of the spin-orbit Kleinman-Bylander projectors for each angular momentum\nekb_so::Union{Nothing, Vector{Vector{Float64}}}: Spin-orbit Kleinman-Bylander energies for each angular momentum\nrhoc::Union{Nothing, Vector{Float64}}: Model core charge density\nd_rhoc_dr::Union{Nothing, Vector{Float64}}: First derivative of the model core charge density\nd2_rhoc_dr2::Union{Nothing, Vector{Float64}}: Second derivative of the model core charge density\nd3_rhoc_dr3::Union{Nothing, Vector{Float64}}: Third derivative of the model core charge density\nd4_rhoc_dr4::Union{Nothing, Vector{Float64}}: Fourth derivative of the model core charge density\n\n\n\n\n\n","category":"type"},{"location":"api/#PseudoPotentialIO.HghFile","page":"API reference","title":"PseudoPotentialIO.HghFile","text":"struct HghFile <: PsPFile\n\nHartwigsen-Goedecker-Hutter pseudopotential file contents.\n\nchecksum::Vector{UInt8}: SHA1 Checksum\ntitle::String: Description\nzion::Vector{Int64}: Pseudo-atomic (valence) charge\nrloc::Float64: Cutoff radius for the local part of the pseudopotential\nnloc::Int64: Number of coefficients defining the local part of the pseudopotential\ncloc::Vector{Float64}: Coefficients of the local part of the pseudopotential\nlmax::Int64: Maximum angular momentum\nrp::Vector{Float64}: Non-local projector cutoff radius for each angular momentum\nh::Vector{Matrix{Float64}}: Kleinman-Bylander energies\n\n\n\n\n\n","category":"type"},{"location":"api/#PseudoPotentialIO.AbstractPsP","page":"API reference","title":"PseudoPotentialIO.AbstractPsP","text":"abstract type AbstractPsP\n\nAbstract type representing a pseudopotential.\n\nThe structure of the data should facilitate efficient computations.\n\nRequired methods:\n\n# A unique string, usually a hash or checksum.\nfunction identifier(file::AbstractPsP)::AbstractString end\n# The symbol of the element for which the pseudopotential is constructed (e.g. `\"Ag\"`)\nfunction elemental_symbol(psp::AbstractPsP)::AbstractString end\n# The maximum angular momentum channel\nfunction max_angular_momentum(psp::AbstractPsP)::Integer end\n# The number of non-local projector radial parts for angular momentum `l`\nfunction n_projector_radials(psp::AbstractPsP, l::Integer)::Integer end\n# The number of chi function radial parts for angular momentum `l`\nfunction n_chi_function_radials(psp::AbstractPsP, l::Integer)::Integer end\n# The pseudo-atomic valence charge\nfunction valence_charge(psp::AbstractPsP)::Real end\n# The charge of the atom which was pseudized (e.g. 8 for Oxygen)\nfunction atomic_charge(psp::AbstractPsP)::Real end\n# Whether the pseudopotential is a norm-conserving pseudopotential\nfunction is_norm_conserving(psp::AbstractPsP)::Bool end\n# Whether the pseudopotential is an ultrasoft pseudopotential\nfunction is_ultrasoft(psp::AbstractPsP)::Bool end\n# Whether the pseudopotential is a projector-augmented wave pseudopotential\nfunction is_paw(psp::AbstractPsP)::Bool end\n# Whether the pseudopotential supports spin-orbit coupled calculations\nfunction has_spin_orbit(psp::AbstractPsP)::Bool end\n# Whether the pseudopotential contains a core charge density (i.e. supports non-linear core\n# correction)\nfunction has_core_density(psp::AbstractPsP)::Bool end\n# Whether the pseudopotential contains a valence charge density (i.e. has support for\n# constructing a tailored guess charge density)\nfunction has_valence_density(psp::AbstractPsP)::Bool end\n# Whether pseudopotential contains chi functions for the valence electrons (i.e.\n# has support for computing tailored orbital-projected quantitites)\nfunction has_chi_functions(psp:AbstractPsP)::Bool end\n# The projector coupling coefficients for angular momentum `l`\nfunction projector_coupling(psp::AbstractPsP, l::Integer)::Matrix{Real} end\n# Radial distance where the local potential decays to zero within a tolerance `tol`\nfunction local_potential_cutoff_radius(psp::AbstractPsP; tol) end\n# Radial distance where the `n`th non-local projector at angular momentum `l` decays to\n# zero within a tolerance `tol`\nfunction projector_cutoff_radius(psp::AbstractPsP, l, n; tol) end\n# Radial distance where the `n`th chi function at angular momentum `l` decays to\n# zero within a tolerance `tol`\nfunction chi_function_cutoff_radius(psp::AbstractPsP, l, n; tol) end\n# Radial distance where the valence charge density decays to zero within a tolerance `tol`\nfunction valence_charge_density_cutoff_radius(psp::AbstractPsP; tol) end\n# Radial distance where the core charge density decays to zero within a tolerance `tol`\nfunction core_charge_density_cutoff_radius(psp::AbstractPsP; tol) end\n# Returns a function which evaulates the local potential at a real-space radial coordinate\nfunction local_potential_real(psp::AbstractPsP) end\n# Returns a function which evaulates the `n`th non-local projector with angular momentum\n# `l` at a real-space radial coordinate\nfunction projector_real(psp::AbstractPsP, l, n) end\n# Returns a function which evaulates the `n`th chi function with angular momentum\n# `l` at a real-space radial coordinate\nfunction chi_function_real(psp::AbstractPsP, l, n) end\n# Returns a function which evaulates the valence charge density at a real-space\n# radial coordinate\nfunction valence_charge_density_real(psp::AbstractPsP) end\n# Returns a function which evaulates the core charge density at a real-space\n# radial coordinate\nfunction core_charge_density_real(psp::AbstractPsP) end\n# Returns a function which evaulates the local potential at a fourier-space radial\n# coordinate\nfunction local_potential_fourier(psp::AbstractPsP) end\n# Returns a function which evaulates the `n`th non-local projector with angular momentum\n# `l` at a fourier-space radial coordinate\nfunction projector_fourier(psp::AbstractPsP, l, n) end\n# Returns a function which evaulates the `n`th chi function with angular momentum\n# `l` at a fourier-space radial coordinate\nfunction chi_function_fourier(psp::AbstractPsP, l, n) end\n# Returns a function which evaulates the valence charge density at a fourier-space\n# radial coordinate\nfunction valence_charge_density_fourier(psp::AbstractPsP) end\n# Returns a function which evaulates the core charge density at a fourier-space\n# radial coordinate\nfunction core_charge_density_fourier(psp::AbstractPsP) end\n# The pseudo-potential energy correction\nfunction pseudo_energy_correction(psp::AbstractPsP) end\n\n\n\n\n\n","category":"type"},{"location":"api/#PseudoPotentialIO.NumericPsP","page":"API reference","title":"PseudoPotentialIO.NumericPsP","text":"abstract type NumericPsP{T} <: AbstractPsP\n\nAbstract type representing numeric pseudopotentials.\n\nAll quantities must be in Hartree atomic units.\n\nLengths in Bohr radii (a₀)\nEnergies in Hartree (Ha / Eₕ)\nElectric charge in electron charges (e = 1)\nMass in electron masses (mₑ)\nAction in reduced Plank constants (ħ = 1)\n\nVectors indexed by angular momentum should be OffsetVectors with indices starting at zero so that angular momentum l, which naturally starts at 0, can be used for both computation and indexing.\n\nRequired fields:\n\n# Checksum\nchecksum::Vector{UInt8}\n# Atomic total charge in units of electron charge\nZatom::Number\n# Pseudo-atomic valence charge in units of electron charge\nZval::Number\n# Maximum angular momentum\nlmax::Integer\n# Radial mesh in units of Bohr\nr::AbstractVector{Real}\n# Radial mesh spacing in units of Bohr\ndr::Union{Real, AbstractVector{Real}}\n# Local potential on the radial mesh in units of Hartree (without r² prefactor)\nVloc::AbstractVector{Real}\n## The units of `D` and `β` should be such that `⟨ βˡₙ | Dˡₙₙ | βˡₙ ⟩` gives Hartree\n# Nonlocal projector coupling constants D[l][n,n']\nD::OffsetVector{AbstractMatrix{Real}}\n# Nonlocal projectors on the radial mesh, multiplied by the mesh squared: r²β[l][n]\nβ::OffsetVector{AbstractVector{AbstractVector{Real}}}\n\n## \"Optional\" fields (must still exist, but could be Union{Nothing})\n# Model core charge density (non-linear core correction) on the radial mesh, multiplied by\n# the mesh squared: r²ρcore\nρcore::Union{Nothing,AbstractVector{Real}}\n# Pseudo-atomic valence charge density on the radial mesh, multiplied by the mesh squared:\n# r²ρval\nρval::Union{Nothing,AbstractVector{Real}}\n# Pseudo-atomic orbitals on the radial mesh, multiplied by the mesh squared: r²χ[l][n]\nχ::Union{Nothing,OffsetVector{AbstractVector{AbstractVector{Real}}}}\n\n\n\n\n\n","category":"type"},{"location":"api/#PseudoPotentialIO.NormConservingPsP","page":"API reference","title":"PseudoPotentialIO.NormConservingPsP","text":"struct NormConservingPsP{T} <: NumericPsP{T}\n\nType representing a numeric norm-conserving pseudopotential.\n\nchecksum::Vector{UInt8}: SHA1 Checksum\nZatom::Any: Total charge.\nZval::Any: Valence charge.\nlmax::Int64: Maximum angular momentum.\nr::Union{Vector{T}, StepRangeLen{T}} where T: Radial mesh.\ndr::Union{Vector{T}, T} where T: Radial mesh spacing.\nVloc::Vector: Local part of the potential on the radial mesh (without an r² prefactor).\nβ::OffsetArrays.OffsetArray{Array{Vector{T}, 1}, 1, Array{Array{Vector{T}, 1}, 1}} where T: Nonlocal projectors β[l][n] on the radial mesh (with an r² prefactor).\nD::OffsetArrays.OffsetArray{Matrix{T}, 1, Array{Matrix{T}, 1}} where T: Projector coupling coefficients D[l][n,m].\nχ::Union{Nothing, OffsetArrays.OffsetArray{Array{Vector{T}, 1}, 1, Array{Array{Vector{T}, 1}, 1}}} where T: Pseudo-atomic wavefunctions χ[l][n] on the radial mesh (with an r² prefactor).\nρcore::Union{Nothing, Vector{T}} where T: Model core charge density on the radial mesh (with an r² prefactor).\nρval::Union{Nothing, Vector{T}} where T: Valence charge density on the radial mesh (with an r² prefactor).\n\n\n\n\n\n","category":"type"},{"location":"api/#PseudoPotentialIO.UltrasoftPsP","page":"API reference","title":"PseudoPotentialIO.UltrasoftPsP","text":"struct UltrasoftPsP{T} <: NumericPsP{T}\n\nType representing a numeric ultrasoft pseudopotential.\n\nZatom::Any: Total charge\nZval::Any: Valence charge\nlmax::Int64: Maximum angular momentum\nr::Vector: Radial mesh\ndr::Union{Vector{T}, T} where T: Radial mesh spacing\nVloc::Vector: Local part of the potential on the radial mesh\nβ::OffsetArrays.OffsetArray{Array{Vector{T}, 1}, 1, Array{Array{Vector{T}, 1}, 1}} where T: Nonlocal projectors β[l][n] on the radial mesh\nD::OffsetArrays.OffsetArray{Matrix{T}, 1, Array{Matrix{T}, 1}} where T: Projector coupling coefficients D[l][n,m]\nχ::OffsetArrays.OffsetArray{Array{Vector{T}, 1}, 1, Array{Array{Vector{T}, 1}, 1}} where T: Pseudo-atomic wavefunctions χ[l][n] on the radial mesh.\nQ::OffsetArrays.OffsetArray{Array{Vector{T}, 2}, 1, Array{Array{Vector{T}, 2}, 1}} where T: Augmentation charge density functions Q[l][n,m] on the radial mesh\nq::OffsetArrays.OffsetArray{Matrix{T}, 1, Array{Matrix{T}, 1}} where T: Augmentation charges q[l][n,m]\nρcore::Union{Nothing, Vector{T}} where T: Model core charge density for non-linear core correction on the radial mesh\nρval::Union{Nothing, Vector{T}} where T: Valence charge density for charge density initialization on the radial mesh\n\n\n\n\n\n","category":"type"},{"location":"api/#PseudoPotentialIO.ProjectorAugmentedWavePsP","page":"API reference","title":"PseudoPotentialIO.ProjectorAugmentedWavePsP","text":"struct ProjectorAugmentedWavePsP{T} <: NumericPsP{T}\n\nType representing a numeric projector-augmented wave pseudopotential.\n\n\n\n\n\n","category":"type"},{"location":"api/#PseudoPotentialIO.AnalyticalPsP","page":"API reference","title":"PseudoPotentialIO.AnalyticalPsP","text":"abstract type AnalyticalPsP <: AbstractPsP\n\nAbstract type representing a pseudopotential with an analytical form.\n\n\n\n\n\n","category":"type"},{"location":"api/#PseudoPotentialIO.HghPsP","page":"API reference","title":"PseudoPotentialIO.HghPsP","text":"struct HghPsP{T} <: AnalyticalPsP\n\nAnalytical Hartwigsen-Goedecker-Hutter pseudopotential.\n\nC. Hartwigsen, S. Goedecker, and J. Hutter. Pys. Rev. B 58, 3641 (1998)\n\nchecksum::Vector{UInt8}: SHA1 Checksum\nZatom::Union{Nothing, T} where T: Atomic charge\nZval::Any: Valence charge\nlmax::Int64: Maximum angular momentum\nrloc::Any: Radial cutoff for the local part of the pseudopotential\ncloc::Vector: Polynomial coefficience of the local part of the pseudopotential\nrnl::OffsetArrays.OffsetArray{T, 1, Vector{T}} where T: Radial cutoffs for the nonlocal projectors rnl[l]\nD::OffsetArrays.OffsetArray{Matrix{T}, 1, Array{Matrix{T}, 1}} where T: Nonlocal projector coupling coefficients D[l][n,m]\n\n\n\n\n\n","category":"type"},{"location":"api/#Functions","page":"API reference","title":"Functions","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"load_psp_file\nload_psp\nlist_families\nload_family\nshow_family_periodic_table\nshow_family_list\n\nidentifier\nelement\nformat\nmax_angular_momentum\nangular_momenta\nrelativistic_treatment\nformalism\nvalence_charge\natomic_charge\nn_projector_radials\nn_projector_angulars\nn_chi_function_radials\nn_chi_function_angulars\nis_norm_conserving\nis_ultrasoft\nis_paw\nhas_spin_orbit\nhas_core_density\nhas_valence_density\nhas_chi_functions\nlocal_potential_cutoff_radius\nprojector_cutoff_radius\nchi_function_cutoff_radius\nvalence_charge_density_cutoff_radius\ncore_charge_density_cutoff_radius\npseudo_cutoff_radius\nprojector_radial_indices\nchi_function_radial_indices\nprojector_coupling\npseudo_energy_correction\naugmentation_coupling\nlocal_potential_real\nlocal_potential_fourier\nprojector_real\nprojector_fourier\nchi_function_real\nchi_function_fourier\nvalence_charge_density_real\nvalence_charge_density_fourier\ncore_charge_density_real\ncore_charge_density_fourier\naugmentation_real\naugmentation_fourier\n\nPseudoPotentialIO.hankel_transform\nPseudoPotentialIO.build_interpolator_real\nPseudoPotentialIO.simpson\nPseudoPotentialIO.fast_sphericalbesselj","category":"page"},{"location":"api/#PseudoPotentialIO.load_psp_file","page":"API reference","title":"PseudoPotentialIO.load_psp_file","text":"load_psp_file(path::AbstractString) -> Any\n\n\nParse a pseudopotential file into a PsPFile struct. \n\nload_psp_file(path)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/load.jl:8.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.load_psp","page":"API reference","title":"PseudoPotentialIO.load_psp","text":"load_psp(file::PsPFile) -> HghPsP{Float64}\n\n\nLoad a pseudopotential file into its corresponding AbstractPsP subtype.\n\nload_psp(file)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/load.jl:25.\n\nload_psp(file)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/load.jl:26.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.list_families","page":"API reference","title":"PseudoPotentialIO.list_families","text":"list_families(; with_info) -> Vector{String}\n\n\nList all known pseudopotential families with additional information about the number and format(s) of the pseudopotentials within if requested (slow!).\n\nlist_families(; with_info)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/load.jl:39.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.load_family","page":"API reference","title":"PseudoPotentialIO.load_family","text":"load_family(family_name_or_dir::AbstractString) -> Dict\n\n\nLoad all pseudopotentials from a given family.\n\nload_family(family_name_or_dir)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/load.jl:135.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.show_family_periodic_table","page":"API reference","title":"PseudoPotentialIO.show_family_periodic_table","text":"show_family_periodic_table(\n    family_name_or_dir::AbstractString\n) -> Dict\n\n\nShow the elements contained in a pseudopotential family as a periodic table.\n\nshow_family_periodic_table(family_name_or_dir)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/load.jl:75.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.show_family_list","page":"API reference","title":"PseudoPotentialIO.show_family_list","text":"show_family_list(\n    family_name_or_dir::AbstractString;\n    elements\n) -> Dict\n\n\nList the pseudopotentials in a pseudopotential family in a pretty table. The elements for which pseudos are shown can be restricted by passing a list of strings, e.g. [\"Ag\"].\n\nshow_family_list(family_name_or_dir; elements)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/load.jl:95.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.identifier","page":"API reference","title":"PseudoPotentialIO.identifier","text":"identifier(file::PsPFile) -> String\n\n\nIdentifying data (preferably unique).\n\nidentifier(file)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/file.jl:42.\n\nidentifier(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/hgh.jl:94.\n\nidentifier(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/psp8.jl:280.\n\nidentifier(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/upf.jl:349.\n\n\n\n\n\nidentifier(psp::AbstractPsP) -> String\n\n\nIdentifying data (preferably unique).\n\nidentifier(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/hgh.jl:43.\n\nidentifier(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/numeric.jl:52.\n\nidentifier(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:93.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.element","page":"API reference","title":"PseudoPotentialIO.element","text":"element(psp::AbstractPsP) -> String\n\n\nElement which the pseudopotential was constructed to reproduce.\n\nelement(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/hgh.jl:44.\n\nelement(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/numeric.jl:53.\n\nelement(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:98.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.format","page":"API reference","title":"PseudoPotentialIO.format","text":"format(file::PsPFile) -> String\n\n\nPseudopotential file format.\n\nformat(file)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/file.jl:47.\n\nformat(_)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/hgh.jl:95.\n\nformat(_)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/psp8.jl:281.\n\nformat(file)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/upf.jl:350.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.max_angular_momentum","page":"API reference","title":"PseudoPotentialIO.max_angular_momentum","text":"max_angular_momentum(file::PsPFile) -> Int64\n\n\nMaximum angular momentum channel in the local part of the pseudopotential.\n\nmax_angular_momentum(file)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/file.jl:57.\n\nmax_angular_momentum(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/hgh.jl:108.\n\nmax_angular_momentum(file)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/psp8.jl:291.\n\nmax_angular_momentum(file)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/upf.jl:358.\n\n\n\n\n\nmax_angular_momentum(psp::AbstractPsP) -> Int64\n\n\nMaximum angular momentum channel of the pseudopotential.\n\nmax_angular_momentum(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/hgh.jl:55.\n\nmax_angular_momentum(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/numeric.jl:56.\n\nmax_angular_momentum(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:103.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.angular_momenta","page":"API reference","title":"PseudoPotentialIO.angular_momenta","text":"angular_momenta(psp::AbstractPsP) -> UnitRange{Int64}\n\n\nAngular momenta values of the pseudopotential.\n\nangular_momenta(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:276.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.relativistic_treatment","page":"API reference","title":"PseudoPotentialIO.relativistic_treatment","text":"relativistic_treatment(file::PsPFile) -> Symbol\n\n\nType of relativistic treatment (fully relativistic or scalar-relativistic).\n\nrelativistic_treatment(file)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/file.jl:114.\n\n\n\n\n\nrelativistic_treatment(psp::AbstractPsP) -> Symbol\n\n\nType of relativistic treatment (fully relativistic or scalar-relativistic).\n\nrelativistic_treatment(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:281.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.formalism","page":"API reference","title":"PseudoPotentialIO.formalism","text":"formalism(\n    file::PsPFile\n) -> Union{Type{NormConservingPsP}, Type{ProjectorAugmentedWavePsP}, Type{UltrasoftPsP}}\n\n\nFormalism of the pseudopotential.\n\nformalism(file)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/file.jl:105.\n\n\n\n\n\nformalism(\n    psp::AbstractPsP\n) -> Union{Type{NormConservingPsP}, Type{ProjectorAugmentedWavePsP}, Type{UltrasoftPsP}}\n\n\nFormalism of the pseudopotential (norm-conserving, ultrasoft, projector-augmented wave, or Coulomb).\n\nformalism(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:287.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.valence_charge","page":"API reference","title":"PseudoPotentialIO.valence_charge","text":"valence_charge(file::PsPFile) -> Float64\n\n\nPseudo-atomic valence charge.\n\nvalence_charge(file)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/file.jl:73.\n\nvalence_charge(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/hgh.jl:107.\n\nvalence_charge(file)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/psp8.jl:290.\n\nvalence_charge(file)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/upf.jl:357.\n\n\n\n\n\nvalence_charge(psp::AbstractPsP) -> Any\n\n\nPseudo-atomic valence charge.\n\nvalence_charge(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/hgh.jl:53.\n\nvalence_charge(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/numeric.jl:60.\n\nvalence_charge(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:119.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.atomic_charge","page":"API reference","title":"PseudoPotentialIO.atomic_charge","text":"atomic_charge(psp::AbstractPsP) -> Any\n\n\nCharge of the atom corresponding to the psp's element.\n\natomic_charge(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/hgh.jl:54.\n\natomic_charge(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/numeric.jl:61.\n\natomic_charge(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:124.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.n_projector_radials","page":"API reference","title":"PseudoPotentialIO.n_projector_radials","text":"n_projector_radials(file::PsPFile, l) -> Int64\n\n\nNumber of radial parts of the Kleinman-Bylander projectors Rl(r) at a given angular momentum.\n\nn_projector_radials(file, l)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/file.jl:63.\n\nn_projector_radials(psp, l)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/hgh.jl:109.\n\nn_projector_radials(file, l)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/psp8.jl:292.\n\nn_projector_radials(file, l)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/upf.jl:359.\n\n\n\n\n\nn_projector_radials(file::PsPFile) -> Any\n\n\nNumber of radial parts of the Kleinman-Bylander nonlocal projectors at all angular momenta up to the maximum angular momentum channel.\n\nn_projector_radials(file)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/file.jl:120.\n\n\n\n\n\nn_projector_radials(psp::AbstractPsP, l) -> Int64\n\n\nNumber of radial parts Rₗₙ(|r|) of the Kleinman-Bylander projectors Rₗₙ(|r|)Yₗₘ(r̂) at a given angular momentum l.\n\nn_projector_radials(psp, l)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/hgh.jl:56.\n\nn_projector_radials(psp, l)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/numeric.jl:57.\n\nn_projector_radials(psp, l)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:109.\n\n\n\n\n\nn_projector_radials(psp::AbstractPsP) -> Any\n\n\nNumber of radial parts of the Kleinman-Bylander projectors at all angular momenta up to the maximum angular momentum channel.\n\nn_projector_radials(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:302.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.n_projector_angulars","page":"API reference","title":"PseudoPotentialIO.n_projector_angulars","text":"n_projector_angulars(file::PsPFile, l) -> Any\n\n\nNumber of angular parts Yₗₘ(r̂) of the Kleinman-Bylander projectors Rₗₙ(|r|)Yₗₘ(r̂) at a given angular momentum l.\n\nn_projector_angulars(file, l)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/file.jl:128.\n\n\n\n\n\nn_projector_angulars(file::PsPFile) -> Any\n\n\nNumber of angular parts of the Kleinman-Bylander projectors at all angular momenta up to the maximum angular momentum channel.\n\nn_projector_angulars(file)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/file.jl:137.\n\n\n\n\n\nn_projector_angulars(psp::AbstractPsP, l) -> Any\n\n\nNumber of angular parts Yₗₘ(r̂) of the Kleinman-Bylander projectors Rₗₙ(|r|)Yₗₘ(r̂) at a given angular momentum l.\n\nn_projector_angulars(psp, l)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:310.\n\n\n\n\n\nn_projector_angulars(psp::AbstractPsP) -> Any\n\n\nNumber of angular parts of the Kleinman-Bylander projectors at all angular momenta up to the maximum angular momentum channel.\n\nn_projector_angulars(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:319.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.n_chi_function_radials","page":"API reference","title":"PseudoPotentialIO.n_chi_function_radials","text":"n_chi_function_radials(file::PsPFile, l) -> Int64\n\n\nNumber of radial parts of the chi-functions with angular momentum l.\n\nn_chi_function_radials(file, l)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/file.jl:68.\n\nn_chi_function_radials(_, l)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/hgh.jl:110.\n\nn_chi_function_radials(_, l)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/psp8.jl:293.\n\nn_chi_function_radials(file, l)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/upf.jl:362.\n\n\n\n\n\nn_chi_function_radials(file::PsPFile) -> Any\n\n\nNumber chi-functions at all angular momenta up to the maximum angular momentum channel.\n\nn_chi_function_radials(file)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/file.jl:145.\n\n\n\n\n\nn_chi_function_radials(psp::AbstractPsP, l) -> Int64\n\n\nNumber of radial parts of the chi-functions with angular momentum l.\n\nn_chi_function_radials(_, _)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/hgh.jl:57.\n\nn_chi_function_radials(psp, l)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/numeric.jl:58.\n\nn_chi_function_radials(psp, l)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:114.\n\n\n\n\n\nn_chi_function_radials(psp::AbstractPsP) -> Any\n\n\nNumber chi-functions Rₗₙ(|r|) * Yₗₘ(r̂) at angular momenta l up to the maximum angular momentum channel.\n\nn_chi_function_radials(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:332.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.n_chi_function_angulars","page":"API reference","title":"PseudoPotentialIO.n_chi_function_angulars","text":"n_chi_function_angulars(file::PsPFile, l) -> Any\n\n\nNumber of angular parts of the chi-functions with angular momentum l.\n\nn_chi_function_angulars(file, l)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/file.jl:152.\n\n\n\n\n\nn_chi_function_angulars(file::PsPFile) -> Any\n\n\nNumber of angular parts of the chi-functions at all angular momenta up to the maximum angular momentum channel.\n\nn_chi_function_angulars(file)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/file.jl:161.\n\n\n\n\n\nn_chi_function_angulars(psp::AbstractPsP, l) -> Any\n\n\nNumber of angular parts of the chi-functions with angular momentum l.\n\nn_chi_function_angulars(psp, l)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:339.\n\n\n\n\n\nn_chi_function_angulars(psp::AbstractPsP) -> Any\n\n\nNumber of angular parts of the chi-functions at all angular momenta up to the maximum angular momentum channel.\n\nn_chi_function_angulars(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:348.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.is_norm_conserving","page":"API reference","title":"PseudoPotentialIO.is_norm_conserving","text":"is_norm_conserving(file::PsPFile) -> Bool\n\n\nWhether the pseudopotential is of the norm-conserving kind.\n\nis_norm_conserving(file)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/file.jl:78.\n\nis_norm_conserving(_)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/hgh.jl:104.\n\nis_norm_conserving(file)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/psp8.jl:287.\n\nis_norm_conserving(file)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/upf.jl:352.\n\n\n\n\n\nis_norm_conserving(psp::AbstractPsP) -> Bool\n\n\nWhether the pseudopotential is of the norm-conserving kind.\n\nis_norm_conserving(_)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/hgh.jl:50.\n\nis_norm_conserving(_)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/norm_conserving.jl:164.\n\nis_norm_conserving(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:129.\n\nis_norm_conserving(_)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/ultrasoft.jl:130.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.is_ultrasoft","page":"API reference","title":"PseudoPotentialIO.is_ultrasoft","text":"is_ultrasoft(file::PsPFile) -> Bool\n\n\nWhether the pseudopotential is of the ultrasoft kind.\n\nis_ultrasoft(file)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/file.jl:83.\n\nis_ultrasoft(_)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/hgh.jl:105.\n\nis_ultrasoft(file)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/psp8.jl:288.\n\nis_ultrasoft(file)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/upf.jl:353.\n\n\n\n\n\nis_ultrasoft(psp::AbstractPsP) -> Bool\n\n\nWhether the pseudopotential is of the ultrasoft kind.\n\nis_ultrasoft(_)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/hgh.jl:51.\n\nis_ultrasoft(_)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/norm_conserving.jl:165.\n\nis_ultrasoft(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:134.\n\nis_ultrasoft(_)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/ultrasoft.jl:131.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.is_paw","page":"API reference","title":"PseudoPotentialIO.is_paw","text":"is_paw(file::PsPFile) -> Bool\n\n\nWhether the pseudopotential is of the plane-augmented wave kind.\n\nis_paw(file)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/file.jl:88.\n\nis_paw(_)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/hgh.jl:106.\n\nis_paw(file)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/psp8.jl:289.\n\nis_paw(file)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/upf.jl:354.\n\n\n\n\n\nis_paw(psp::AbstractPsP) -> Bool\n\n\nWhether the pseudopotential is of the plane-augmented wave kind.\n\nis_paw(_)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/hgh.jl:52.\n\nis_paw(_)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/norm_conserving.jl:166.\n\nis_paw(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:139.\n\nis_paw(_)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/ultrasoft.jl:132.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.has_spin_orbit","page":"API reference","title":"PseudoPotentialIO.has_spin_orbit","text":"has_spin_orbit(file::PsPFile) -> Bool\n\n\nWhether the pseudopotential contains relativistic spin-orbit coupling data.\n\nhas_spin_orbit(file)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/file.jl:93.\n\nhas_spin_orbit(_)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/hgh.jl:102.\n\nhas_spin_orbit(file)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/psp8.jl:285.\n\nhas_spin_orbit(file)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/upf.jl:355.\n\n\n\n\n\nhas_spin_orbit(psp::AbstractPsP) -> Bool\n\n\nWhether the pseudopotential contains relativistic spin-orbit coupling data.\n\nhas_spin_orbit(_)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/hgh.jl:46.\n\nhas_spin_orbit(_)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/numeric.jl:62.\n\nhas_spin_orbit(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:144.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.has_core_density","page":"API reference","title":"PseudoPotentialIO.has_core_density","text":"has_core_density(file::PsPFile) -> Bool\n\n\nWhether the pseudopotential contains non-linear core correction data (model core charge density).\n\nhas_core_density(file)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/file.jl:99.\n\nhas_core_density(_)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/hgh.jl:103.\n\nhas_core_density(file)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/psp8.jl:286.\n\nhas_core_density(file)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/file/upf.jl:356.\n\n\n\n\n\nhas_core_density(psp::AbstractPsP) -> Bool\n\n\nWhether the pseudopotential contains non-linear core correction data (model core charge density).\n\nhas_core_density(_)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/hgh.jl:47.\n\nhas_core_density(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/numeric.jl:63.\n\nhas_core_density(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:150.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.has_valence_density","page":"API reference","title":"PseudoPotentialIO.has_valence_density","text":"has_valence_density(psp::AbstractPsP) -> Bool\n\n\nWhether the pseudopotential contains valence charge density data.\n\nhas_valence_density(_)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/hgh.jl:48.\n\nhas_valence_density(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/numeric.jl:64.\n\nhas_valence_density(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:155.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.has_chi_functions","page":"API reference","title":"PseudoPotentialIO.has_chi_functions","text":"has_chi_functions(psp::AbstractPsP) -> Bool\n\n\nWhether the pseudopotential contains pseudoatomic orbitals.\n\nhas_chi_functions(_)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/hgh.jl:49.\n\nhas_chi_functions(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/numeric.jl:65.\n\nhas_chi_functions(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:160.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.local_potential_cutoff_radius","page":"API reference","title":"PseudoPotentialIO.local_potential_cutoff_radius","text":"local_potential_cutoff_radius(psp::AbstractPsP; tol) -> Any\n\n\nCutoff radius of the local potential in real-space.\n\nlocal_potential_cutoff_radius(; tol)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/hgh.jl:59.\n\nlocal_potential_cutoff_radius(psp; tol)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/numeric.jl:67.\n\nlocal_potential_cutoff_radius(psp; tol)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:170.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.projector_cutoff_radius","page":"API reference","title":"PseudoPotentialIO.projector_cutoff_radius","text":"projector_cutoff_radius(\n    psp::AbstractPsP,\n    l::Int64,\n    n::Int64;\n    tol\n) -> Any\n\n\nCutoff radius of the nth Kleinman-Bylander non-local projector at angular momentum l in real-space.\n\nprojector_cutoff_radius(, , ; tol)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/hgh.jl:60.\n\nprojector_cutoff_radius(psp, l, n; tol)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/numeric.jl:72.\n\nprojector_cutoff_radius(psp, l, n; tol)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:176.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.chi_function_cutoff_radius","page":"API reference","title":"PseudoPotentialIO.chi_function_cutoff_radius","text":"chi_function_cutoff_radius(\n    psp::AbstractPsP,\n    l::Int64,\n    n::Int64;\n    tol\n) -> Any\n\n\nCutoff radius of the nth chi function at angular momentum l in real-space.\n\nchi_function_cutoff_radius(, , ; tol)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/hgh.jl:61.\n\nchi_function_cutoff_radius(psp, l, n; tol)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/numeric.jl:77.\n\nchi_function_cutoff_radius(psp, l, n; tol)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:181.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.valence_charge_density_cutoff_radius","page":"API reference","title":"PseudoPotentialIO.valence_charge_density_cutoff_radius","text":"valence_charge_density_cutoff_radius(\n    psp::AbstractPsP;\n    tol\n) -> Any\n\n\nCutoff radius of the valence charge density in real-space.\n\nvalence_charge_density_cutoff_radius(; tol)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/hgh.jl:62.\n\nvalence_charge_density_cutoff_radius(psp; tol)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/numeric.jl:83.\n\nvalence_charge_density_cutoff_radius(psp; tol)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:186.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.core_charge_density_cutoff_radius","page":"API reference","title":"PseudoPotentialIO.core_charge_density_cutoff_radius","text":"core_charge_density_cutoff_radius(\n    psp::AbstractPsP;\n    tol\n) -> Any\n\n\nCutoff radius of the core charge density in real-space.\n\ncore_charge_density_cutoff_radius(; tol)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/hgh.jl:63.\n\ncore_charge_density_cutoff_radius(psp; tol)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/numeric.jl:89.\n\ncore_charge_density_cutoff_radius(psp; tol)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:191.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.pseudo_cutoff_radius","page":"API reference","title":"PseudoPotentialIO.pseudo_cutoff_radius","text":"pseudo_cutoff_radius(psp::AbstractPsP; f, tol) -> Any\n\n\nFind the cutoff radius for the pseudopotential. Supply a function f to determine what kind of reduction over cutoff radii for different quantities is performed. Supply tol if you'd like to truncate the quantities where they decay to |f| < tol.\n\npseudo_cutoff_radius(psp; f, tol)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:389.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.projector_radial_indices","page":"API reference","title":"PseudoPotentialIO.projector_radial_indices","text":"projector_radial_indices(\n    psp::AbstractPsP,\n    l\n) -> UnitRange{Int64}\n\n\nIndices of projector radial parts at a given angular momentum.\n\nprojector_radial_indices(psp, l)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:296.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.chi_function_radial_indices","page":"API reference","title":"PseudoPotentialIO.chi_function_radial_indices","text":"chi_function_radial_indices(\n    psp::AbstractPsP,\n    l\n) -> UnitRange{Int64}\n\n\nIndices of pseudo-atomic wavefunction radial parts at a given angular momentum.\n\nchi_function_radial_indices(psp, l)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:326.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.projector_coupling","page":"API reference","title":"PseudoPotentialIO.projector_coupling","text":"projector_coupling(psp::AbstractPsP, l) -> Matrix\n\n\nProjector coupling matrix at angular momentum l.\n\nprojector_coupling(psp, l)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/hgh.jl:65.\n\nprojector_coupling(psp, l)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/numeric.jl:95.\n\nprojector_coupling(psp, l)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:165.\n\n\n\n\n\nprojector_coupling(\n    psp::AbstractPsP,\n    l::Int64,\n    n::Int64,\n    m::Int64\n) -> Any\n\n\nProjector coupling constant between the nth and mth projector with angular momentum l.\n\nprojector_coupling(psp, l, n, m)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:402.\n\n\n\n\n\nprojector_coupling(\n    psp::AbstractPsP,\n    l::Int64,\n    n::Int64\n) -> Any\n\n\nProjector coupling constant between the nth projector with angular momentum l itself.\n\nprojector_coupling(psp, l, n)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:409.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.pseudo_energy_correction","page":"API reference","title":"PseudoPotentialIO.pseudo_energy_correction","text":"pseudo_energy_correction(T::Type, psp::AbstractPsP) -> Any\n\n\nPseudopotential energy correction (the DC component of the Fourier transform of the local part of the pseudopotential).\n\npseudo_energy_correction(T, psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/hgh.jl:165.\n\npseudo_energy_correction(T, psp; tol)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/numeric.jl:158.\n\npseudo_energy_correction(T, psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:270.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.augmentation_coupling","page":"API reference","title":"PseudoPotentialIO.augmentation_coupling","text":"augmentation_coupling(\n    psp::UltrasoftPsP{T},\n    l::Int64\n) -> Matrix\n\n\nAugmentation charge coupling matrix (elements).\n\naugmentation_coupling(psp, l)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/ultrasoft.jl:139.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.local_potential_real","page":"API reference","title":"PseudoPotentialIO.local_potential_real","text":"local_potential_real(psp::AbstractPsP) -> Any\n\n\nLocal part of the pseudopotential evaluated at real-space point r.\n\nlocal_potential_real(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/hgh.jl:98.\n\nlocal_potential_real(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/numeric.jl:99.\n\nlocal_potential_real(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:196.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.local_potential_fourier","page":"API reference","title":"PseudoPotentialIO.local_potential_fourier","text":"local_potential_fourier(psp::AbstractPsP) -> Any\n\n\nLocal part of the pseudopotential evaluated at reciprocal-space point q.\n\nlocal_potential_fourier(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/hgh.jl:88.\n\nlocal_potential_fourier(psp; tol)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/numeric.jl:122.\n\nlocal_potential_fourier(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:232.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.projector_real","page":"API reference","title":"PseudoPotentialIO.projector_real","text":"projector_real(\n    psp::AbstractPsP,\n    l::Integer,\n    n::Integer\n) -> Any\n\n\nThe nth nonlocal Kleinman-Bylander projector at angular momentum l evaluated at real-space point r.\n\nprojector_real(psp, l, n)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/hgh.jl:154.\n\nprojector_real(psp, l, n)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/numeric.jl:103.\n\nprojector_real(psp, l, n)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:204.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.projector_fourier","page":"API reference","title":"PseudoPotentialIO.projector_fourier","text":"projector_fourier(\n    psp::AbstractPsP,\n    l::Integer,\n    n::Integer\n) -> Any\n\n\nThe nth nonlocal Kleinman-Bylander projector at angular momentum l evaluated at reciprocal-space point q.\n\nprojector_fourier(psp, l, n)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/hgh.jl:144.\n\nprojector_fourier(psp, l, n; tol)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/numeric.jl:137.\n\nprojector_fourier(psp, l, n)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:240.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.chi_function_real","page":"API reference","title":"PseudoPotentialIO.chi_function_real","text":"chi_function_real(\n    psp::AbstractPsP,\n    l::Integer,\n    n::Integer\n) -> Any\n\n\nThe nth chi function at angular momentum l evaulated at real-space point r.\n\nchi_function_real(psp, l, n)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/numeric.jl:107.\n\nchi_function_real(psp, l, n)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:211.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.chi_function_fourier","page":"API reference","title":"PseudoPotentialIO.chi_function_fourier","text":"chi_function_fourier(\n    psp::AbstractPsP,\n    l::Integer,\n    n::Integer\n) -> Any\n\n\nThe nth chi function at angular momentum l evaulated at reciprocal-space point q.\n\nchi_function_fourier(psp, l, n; tol)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/numeric.jl:142.\n\nchi_function_fourier(psp, l, n)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:248.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.valence_charge_density_real","page":"API reference","title":"PseudoPotentialIO.valence_charge_density_real","text":"valence_charge_density_real(psp::AbstractPsP) -> Any\n\n\nPseudo-atomic valence charge density evaluated at real-space point r.\n\nvalence_charge_density_real(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/numeric.jl:112.\n\nvalence_charge_density_real(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:218.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.valence_charge_density_fourier","page":"API reference","title":"PseudoPotentialIO.valence_charge_density_fourier","text":"valence_charge_density_fourier(psp::AbstractPsP) -> Any\n\n\nPseudo-atomic valence charge density evaluated at reciprocal-space point q.\n\nvalence_charge_density_fourier(psp; tol)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/numeric.jl:148.\n\nvalence_charge_density_fourier(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:255.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.core_charge_density_real","page":"API reference","title":"PseudoPotentialIO.core_charge_density_real","text":"core_charge_density_real(psp::AbstractPsP) -> Any\n\n\nModel core charge density evaluated at real-space point r.\n\ncore_charge_density_real(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/numeric.jl:117.\n\ncore_charge_density_real(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:225.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.core_charge_density_fourier","page":"API reference","title":"PseudoPotentialIO.core_charge_density_fourier","text":"core_charge_density_fourier(psp::AbstractPsP) -> Any\n\n\nModel core charge density evaluated at reciprocal-space point q.\n\ncore_charge_density_fourier(psp; tol)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/numeric.jl:153.\n\ncore_charge_density_fourier(psp)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/psp.jl:262.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.augmentation_real","page":"API reference","title":"PseudoPotentialIO.augmentation_real","text":"augmentation_real(\n    psp::UltrasoftPsP,\n    l::Int64,\n    n::Int64,\n    m::Int64\n) -> Any\n\n\nAugmentation charge in real-space.\n\naugmentation_real(psp, l, n, m)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/ultrasoft.jl:154.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.augmentation_fourier","page":"API reference","title":"PseudoPotentialIO.augmentation_fourier","text":"augmentation_fourier(\n    psp::UltrasoftPsP,\n    l::Int64,\n    n::Int64,\n    m::Int64\n) -> Any\n\n\nAugmentation charge in fourier-space.\n\naugmentation_fourier(psp, l, n, m)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/psp/ultrasoft.jl:161.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.hankel_transform","page":"API reference","title":"PseudoPotentialIO.hankel_transform","text":"Hankel / Bessel-Fourier transform of order l of a function f on a radial mesh r. The function f should be rapidly decaying to zero within the bounds of the mesh.\n\nThe radial transform is defined as:\n\n4pi int_0^infty f(r) j_l(q r) r^2 dr approx\n4pi int_r_1^r_N f(r) j_l(q r) r^2 dr\n\nwhere j_l(x) is the spherical Bessel function of the first kind at order l.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.build_interpolator_real","page":"API reference","title":"PseudoPotentialIO.build_interpolator_real","text":"Build an interpolator for the function f on the radial grid r in real space and return a function with two methods for evaluating it at radial points and arbitrary 3D vectors.\n\nIf the radial grid is linear, the function will be interpolated using cubic splines. Otherwise, simple linear interpolation is the only method currently supported by the interpoaltion backend.\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.simpson","page":"API reference","title":"PseudoPotentialIO.simpson","text":"Simpson's rule integration for a function f(x) on a grid with grid spacing dx. Performs better than the trapezoidal rule on logarithmic grids.\n\nFor a uniform grid with an odd number of grid points:\n\nint_a^b f(x) dx approx\nfracDelta x3 left\nf(x_1) +\n4 left( sum_i=2 i_mathrmeven^N-1 f(x_i) right) +\n2 left( sum_i=3 i_mathrmodd^N-2 f(x_i) +\nf(x_N) right) right\n\n\n\n\n\n","category":"function"},{"location":"api/#PseudoPotentialIO.fast_sphericalbesselj","page":"API reference","title":"PseudoPotentialIO.fast_sphericalbesselj","text":"fast_sphericalbesselj(l::Integer) -> Any\n\n\nSpherical Bessel function of the first kind jₗ(x).\n\nConsistent with https://en.wikipedia.org/wiki/Besselfunction#SphericalBessel_functions and with SpecialFunctions.sphericalbesselj and Bessels.sphericalbesselj.\n\nSpecialized for integer l in the range 0 leq l leq 5:\n\nbeginaligned\nj_0(x) = fracsin(x)x \nj_1(x) = fracsin(x) - xcos(x)x^2 \nj_2(x) = frac(3 - x^2)sin(x) - 3xcos(x)x^3 \nj_3(x) = frac(15 - 6x^2)sin(x) + (x^3 - 15x)cos(x)x^4 \nj_4(x) = frac(105 - 45x^2 + x^4)sin(x) + (10x^3 - 105x)cos(x)x^5 \nendaligned\n\nfast_sphericalbesselj(l)\n\ndefined at /home/runner/work/PseudoPotentialIO.jl/PseudoPotentialIO.jl/src/common/spherical_bessel.jl:19.\n\n\n\n\n\n","category":"function"},{"location":"formats/#File-formats","page":"Formats","title":"File formats","text":"","category":"section"},{"location":"formats/","page":"Formats","title":"Formats","text":"Here are some links to documentation and other parsers for various pseudopotential file formats:","category":"page"},{"location":"formats/","page":"Formats","title":"Formats","text":"UPF\nQuantumESPRESSO website\nCECAM website\nupf-schema on GitHub\nupf_to_json on GitHub\nQuantumESPRESSO read_upf_new.f90 on GitHub\nABINIT m_upf2abinit.F90 on GitHub\nAbacus read_pp_upf201.cpp on GitHub\nGPAW upf.py on GitLab \n\nPSP8\nABINIT documentation\nABINIT m_psp8.F90 on GitHub","category":"page"},{"location":"#PseudoPotentialIO.jl","page":"Home","title":"PseudoPotentialIO.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Stable) (Image: Dev) (Image: Build Status) (Image: Coverage)","category":"page"},{"location":"","page":"Home","title":"Home","text":"PseudoPotentialIO aims to provide parsers for common pseudopotential file formats used by density functional theory codes and an interface for accesssing the quantities that they contain.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The following file formats are supported or have planned (or no planned) support. If your favorite format does not appear in the table below, please file an issue!","category":"page"},{"location":"","page":"Home","title":"Home","text":"Format Read Standardize\nUPF (old) ✅ NormConserving, Ultrasoft\nUPF (v2.0.1 with schema) ✅ NormConserving, Ultrasoft\nPSP1 Not planned \nPSP3/HGH Planned Hgh\nPSP4/Teter Not planned \nPSP5/\"Phoney\" Not planned \nPSP6/FHI98PP Not planned \nPSP7/ABINIT PAW Not planned \nPSP8/ONCVPSP ✅ NormConserving\nPSP9/PSML Planned \nPSP17/ABINIT PAW XML Planned \nFPMD XML Not planned \nVanderbilt USPP Planned ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pseudopotentials are read into [Format]File structs which mirror very closely the contents of the file. However, different file formats provide important physical quantities in slightly different forms. For a more consistent interface to the physical quantities with consitent units, meanings, and dimensions, *File structs can be converted to *Psp pseudopotential structs.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The following type tree for representing different types of pseudopotentials is implemented","category":"page"},{"location":"","page":"Home","title":"Home","text":"AbstractPsP\n|\n--- NumericPsP (pseudopotentials on grids)\n|   |\n|   --- NormConservingPsP (UPF, PSP8)\n|   |\n|   --- UltrasoftPsP (UPF)\n|   |\n|   --- [Placeholder] ProjectorAugmentedWavePsP (UPF)\n|\n--- AnalyticPsP (pseudopotentials with analytic forms)\n    |\n    --- HghPsP (HGH)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Unsupported features:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Fully relativistic (spin-orbit coupling) pseudopotentials\nSemilocal pseudopotentials","category":"page"},{"location":"","page":"Home","title":"Home","text":"Supported features:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Non-linear core corrections\nMultiprojector pseudopotentials\nLinear and logarithmic meshes","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"EditURL = \"https://github.com/azadoks/PseudoPotentialIO.jl/blob/main/docs/src/tutorial.jl\"","category":"page"},{"location":"tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Here, we'll take a look at the basic usage of PseudoPotentialIO.jl: searching for, loading, and investigating the contents of pseudopotentials.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using PseudoPotentialIO\nusing CairoMakie\nusing Colors","category":"page"},{"location":"tutorial/#.-Searching-for-pseudopotentials","page":"Tutorial","title":"1. Searching for pseudopotentials","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"PseudoPotentialIO provides easy access to a variety of pseudopotential families with zero setup using Julia Artifacts, LazyArtifacts.jl, and PseudoLibrary. In order to list the available pre-bundled families, use list_families","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"list_families(with_info=true)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Because families are downloaded lazily, detailed information on some of the families is missing (they need to be downloaded first). In order to download a pseudopotential family, you can load it using load_family.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"note: Loading pseudopotential families\nload_family can also load all the pseudopotentials in a local directory!","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"You can then see an overview of which elements the family supports with show_family_periodic_table.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"family = load_family(\"hgh_lda_upf\");\nshow_family_periodic_table(family)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"For more detailed information, use show_family_list. You can restrict the output by providing a list of elements that you're interested in.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"show_family_list(family)  # Show all the pseudopotentials\nshow_family_list(family; elements=[\"Ba\", \"Ti\", \"O\"])  # Only show the pseudos for Ba, Ti, and O","category":"page"},{"location":"tutorial/#.-Loading-pseudopotential-files","page":"Tutorial","title":"2. Loading pseudopotential files","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To load an individual pseudopotential file, use load_psp_file, specifying the family name or directory and the filename of the pseudopotential","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Ba_psp_file = load_psp_file(\"hgh_lda_upf\", \"Ba.pz-sp-hgh.UPF\")","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"PseudoPotentialIO distinguishes between pseudopotential files and the pseudopotentials themselves. Structures like HghFile, UpfFile, and Psp8File correspond to pseudopotential file formats and make the quantities that these files contain directly available, with no unit conversion or processing. For example, we can take a look at the author field from the header in the barium UPF pseudopotential we just loaded","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Ba_psp_file.header.author","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"We can also check that the properties of Bapspfile match up with the sections of a UPF file","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"propertynames(Ba_psp_file)","category":"page"},{"location":"tutorial/#.-Loading-pseudopotentials","page":"Tutorial","title":"3. Loading pseudopotentials","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Once you've decided that you would like to use a given pseudopotential for a calculation, either convert its PsPFile struct a corresponding pseudopotential structure","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Ba_psp_from_File = load_psp(Ba_psp_file)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":", or load the pseudopotential structure directly from the file using load_psp","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Ba_psp_from_disk = load_psp(\"hgh_lda_upf\", \"Ba.pz-sp-hgh.UPF\")","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"We can confirm that these pseudopotentials are identical","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Ba_psp_from_File == Ba_psp_from_disk","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"This procedure has processed the contents of the UPF file (on disk) or the UpfFile struct into a common and consistent data representation that PseudoPotentialIO uses for calculations. We can see that the contents have changed by looking at the property names of our new UpfPsP struct","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"propertynames(Ba_psp_from_disk)","category":"page"},{"location":"tutorial/#.-Inspecting-pseudopotential-quantities","page":"Tutorial","title":"4. Inspecting pseudopotential quantities","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"One thing that we might want to do with a processed pseudopotential is to visualize some of the quantities it contains. Let's plot the Kleinman-Bylander projectors from a PseudoDojo barium pseudopotential","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Ba_psp = load_psp(\"pd_nc_sr_pbesol_standard_0.4.1_upf\", \"Ba.upf\");\nlet\n    linestyles = [:solid, :dash, :dot]\n    colors = Colors.JULIA_LOGO_COLORS\n    fig = Figure(); ax = Axis(fig[1,1], xlabel=\"r [a₀]\", ylabel=\"β(r)\")\n    for l in angular_momenta(Ba_psp)                  # Iterate over each angular momentum 0:lmax\n        color = colors[l+1]\n        for n in projector_radial_indices(Ba_psp, l)  # Iterate over each projector at l 1:nmax\n            linestyle = linestyles[n]\n            r²βln = Ba_psp.β[l][n]                    # Projector multiplied by r²\n            i_rc_ln = lastindex(r²βln)                # Cutoff radius index\n            βln = r²βln ./ Ba_psp.r[1:i_rc_ln].^2     # Remove the r² prefactor\n            lines!(ax, Ba_psp.r[1:i_rc_ln], βln, label=\"|β[$l][$n]⟩\",\n                   linestyle=linestyle, color=color)\n        end\n    end\n    axislegend()\n    fig\nend","category":"page"},{"location":"quantities/#Quantity-definitions","page":"Quantities","title":"Quantity definitions","text":"","category":"section"},{"location":"quantities/","page":"Quantities","title":"Quantities","text":"A more thorough discussion of pseudopotentials, from which many of the equations below have been adapted can be found here.","category":"page"},{"location":"quantities/#Norm-conserving-pseudopotentials","page":"Quantities","title":"Norm-conserving pseudopotentials","text":"","category":"section"},{"location":"quantities/","page":"Quantities","title":"Quantities","text":"Following the procedure of Vanderbilt 1991, separable norm-conserving pseudopotentials can be directly produced using the following procedure:","category":"page"},{"location":"quantities/","page":"Quantities","title":"Quantities","text":"solve the all-electron Kohn-Sham equations for the isolated atom, yielding the all-electron potential V(r) and atomic wave-functions phi_lnrangle with energies varepsilon_ln\ngenerate a local potential V_mathrmloc(r) such that V_mathrmloc(r) = V(r) for r  r_L (r_L is the inner pseudization radius for the local potential); V_mathrmloc(r) for r  r_L can be any smooth regular function\ngenerate pseudo-atomic wavefunctions tildephi_lnrangle such that tildephi_ln(r) = phi_ln(r) for r  r_cln (r_cln is the inner cutoff radius for the n-th pseudo-atomic wavefunction at angular momentum l); tildephi_ln(r) for r  r_cln can be any smooth regular function\ngenerate the corresponding functions chi_lnrangle (vanishing for r  r_cln):","category":"page"},{"location":"quantities/","page":"Quantities","title":"Quantities","text":"chi_lnrangle equiv (varepsilon_ln - T - V_mathrmloc)tildephi_lnrangle","category":"page"},{"location":"quantities/","page":"Quantities","title":"Quantities","text":"generate the KB projectors beta_lmrangle:","category":"page"},{"location":"quantities/","page":"Quantities","title":"Quantities","text":"beta_lmrangle equiv sum_m (B^-1)_lnm chi_lmrangle","category":"page"},{"location":"quantities/","page":"Quantities","title":"Quantities","text":"where B_lnm = langle tildephi_ln  chi_ln rangle and beta_lmrangle satisfy langle beta_ln  tildephi_lm rangle = delta_nm","category":"page"},{"location":"quantities/#Form-of-the-pseudopotentials","page":"Quantities","title":"Form of the pseudopotentials","text":"","category":"section"},{"location":"quantities/","page":"Quantities","title":"Quantities","text":"PseudoPotentialIO assumes a the above separable (Kleinman-Bylander) form for all the pseudopotentials. Therefore, the total pseudopotential is defined as:","category":"page"},{"location":"quantities/","page":"Quantities","title":"Quantities","text":"hatV^mathrmPsP rightarrow hatV_mathrmKB = hatV^prime_mathrmloc + hatV_mathrmNL","category":"page"},{"location":"quantities/","page":"Quantities","title":"Quantities","text":"The non-local part of the potential hatV_lmathrmNL at angular momentum l is defined as","category":"page"},{"location":"quantities/","page":"Quantities","title":"Quantities","text":"hatV_lmathrmNL equiv sum_nm  beta_ln rangle D_lnm langle beta_lm ","category":"page"},{"location":"quantities/","page":"Quantities","title":"Quantities","text":"where beta_ln is the n-th non-local projector at angular momentum l in Kleinman-Bylander (KB) form, and D_lnm are the KB energies or projector coupling coefficients at angular momentum l.","category":"page"},{"location":"quantities/#Storing-the-quantities","page":"Quantities","title":"Storing the quantities","text":"","category":"section"},{"location":"quantities/","page":"Quantities","title":"Quantities","text":"The local part of the potential hatV^prime_mathrmloc is stored in numerical pseudopotentials as the vector Vloc, without any prefactor, i.e. the stored quantity is","category":"page"},{"location":"quantities/","page":"Quantities","title":"Quantities","text":"hatV_mathrmloc(r)","category":"page"},{"location":"quantities/","page":"Quantities","title":"Quantities","text":"The KB projectors beta_ln are stored in numerical pseudopotentials as β[l][n] with a prefactor of r^2, i.e. the stored quantity is","category":"page"},{"location":"quantities/","page":"Quantities","title":"Quantities","text":"r^2 beta_ln(r)","category":"page"},{"location":"quantities/","page":"Quantities","title":"Quantities","text":"The KB energies / projector coupling coefficients are stored in all pseudopotentials as D[l][n,m].\nIf available, the chi_ln functions are stored in numerical pseudopotentials as χ[l][n] with a prefactor of r^2, i.e. the stored quantity is","category":"page"},{"location":"quantities/","page":"Quantities","title":"Quantities","text":"r^2 chi_ln(r)","category":"page"},{"location":"quantities/","page":"Quantities","title":"Quantities","text":"If available, the pseudo-atomic valence charge density rho_mathrmval(r) = sum_l=0^l_mathrmmax sum_m=-l^l sum_n tildephi_ln(r)^2 is stored with a prefactor of r^2, i.e. the stored quantity is","category":"page"},{"location":"quantities/","page":"Quantities","title":"Quantities","text":"r^2 rho_mathrmval(r)","category":"page"},{"location":"quantities/","page":"Quantities","title":"Quantities","text":"If available, the core charge density (non-linear core correction) rho_mathrmcore(r) is stored with a prefactor of r^2, i.e. the stored quantity is","category":"page"},{"location":"quantities/","page":"Quantities","title":"Quantities","text":"r^2 rho_mathrmcore(r)","category":"page"}]
}
